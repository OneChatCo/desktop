name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python for node-gyp (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Configure Windows environment
        if: matrix.os == 'windows-latest'
        run: |
          # Create cache directory
          New-Item -ItemType Directory -Force -Path "C:\npm-cache" | Out-Null
          New-Item -ItemType Directory -Force -Path "C:\electron-cache" | Out-Null
        shell: pwsh

      - name: Clean npm cache
        run: npm cache clean --force

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm install --no-audit --no-fund --legacy-peer-deps
        env:
          npm_config_cache: C:\npm-cache
          ELECTRON_CACHE: C:\electron-cache

      - name: Install dependencies (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm ci --no-audit --no-fund

      - name: Build application and Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Set environment variables
          $env:ELECTRON_CACHE = "C:\electron-cache"
          $env:CSC_IDENTITY_AUTO_DISCOVERY = "false"

          # Create cache directory
          New-Item -ItemType Directory -Force -Path "C:\electron-cache" | Out-Null

          # Kill any running node processes
          Get-Process -Name "node" -ErrorAction SilentlyContinue | Stop-Process -Force
          Start-Sleep -Seconds 2

          # Clean previous build
          if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }

          # Build application
          Write-Host "Building TypeScript..."
          npx tsc -p tsconfig.json
          if ($LASTEXITCODE -ne 0) { throw "TypeScript build failed" }

          Write-Host "Copying assets..."
          npm run copy:assets
          if ($LASTEXITCODE -ne 0) { throw "Asset copy failed" }

          Write-Host "Building CSS..."
          npm run tailwind:build
          if ($LASTEXITCODE -ne 0) { throw "CSS build failed" }

          Write-Host "Building Electron app..."
          npx electron-builder --win
          if ($LASTEXITCODE -ne 0) { throw "Electron build failed" }

          Write-Host "Build completed successfully!"
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_cache: C:\npm-cache
          ELECTRON_CACHE: C:\electron-cache

      - name: Build application (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm run build

      - name: Build Electron app (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.zip
            dist/latest.yml
            dist/*.blockmap

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
            dist/*.blockmap

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/latest-linux.yml
            dist/*.blockmap

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          ls -la artifacts/
          echo "Windows artifacts:"
          ls -la artifacts/windows-artifacts/ || echo "No windows artifacts found"
          echo "macOS artifacts:"
          ls -la artifacts/macos-artifacts/ || echo "No macOS artifacts found"
          echo "Linux artifacts:"
          ls -la artifacts/linux-artifacts/ || echo "No Linux artifacts found"

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release notes file
          cat > release_notes.md << 'EOF'
          Auto-generated release from commit ${{ github.sha }}

          ## Changes
          - Latest changes from commit: ${{ github.event.head_commit.message }}

          ## Downloads
          Choose the appropriate version for your operating system:
          - **Windows**: `.exe` (installer) or `.zip` (portable)
          - **macOS**: `.dmg` (installer) or `.zip` (portable)  
          - **Linux**: `.AppImage` (portable) or `.deb` (Debian/Ubuntu)
          EOF

          # Start building the release command
          release_files=()

          # Check for available assets and add them to the array
          if [ -f "artifacts/windows-artifacts/OneChatApp Setup ${{ steps.package-version.outputs.version }}.exe" ]; then
            release_files+=("artifacts/windows-artifacts/OneChatApp Setup ${{ steps.package-version.outputs.version }}.exe#OneChat-Setup-${{ steps.package-version.outputs.version }}.exe")
          fi

          if [ -f "artifacts/windows-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}-win.zip" ]; then
            release_files+=("artifacts/windows-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}-win.zip#OneChat-${{ steps.package-version.outputs.version }}-windows.zip")
          fi

          # Add Windows metadata file for auto-updater
          if [ -f "artifacts/windows-artifacts/latest.yml" ]; then
            release_files+=("artifacts/windows-artifacts/latest.yml")
          fi

          # Add Windows blockmap files for differential updates
          for blockmap in artifacts/windows-artifacts/*.blockmap; do
            if [ -f "$blockmap" ]; then
              release_files+=("$blockmap")
            fi
          done

          if [ -f "artifacts/macos-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}.dmg" ]; then
            release_files+=("artifacts/macos-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}.dmg#OneChat-${{ steps.package-version.outputs.version }}.dmg")
          fi

          if [ -f "artifacts/macos-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}-mac.zip" ]; then
            release_files+=("artifacts/macos-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}-mac.zip#OneChat-${{ steps.package-version.outputs.version }}-macos.zip")
          fi

          # Add macOS metadata file for auto-updater
          if [ -f "artifacts/macos-artifacts/latest-mac.yml" ]; then
            release_files+=("artifacts/macos-artifacts/latest-mac.yml")
          fi

          # Add macOS blockmap files for differential updates
          for blockmap in artifacts/macos-artifacts/*.blockmap; do
            if [ -f "$blockmap" ]; then
              release_files+=("$blockmap")
            fi
          done

          if [ -f "artifacts/linux-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}.AppImage" ]; then
            release_files+=("artifacts/linux-artifacts/OneChatApp-${{ steps.package-version.outputs.version }}.AppImage#OneChat-${{ steps.package-version.outputs.version }}.AppImage")
          fi

          if [ -f "artifacts/linux-artifacts/onechatapp_${{ steps.package-version.outputs.version }}_amd64.deb" ]; then
            release_files+=("artifacts/linux-artifacts/onechatapp_${{ steps.package-version.outputs.version }}_amd64.deb#OneChat-${{ steps.package-version.outputs.version }}.deb")
          fi

          # Add Linux metadata file for auto-updater
          if [ -f "artifacts/linux-artifacts/latest-linux.yml" ]; then
            release_files+=("artifacts/linux-artifacts/latest-linux.yml")
          fi

          # Add Linux blockmap files for differential updates
          for blockmap in artifacts/linux-artifacts/*.blockmap; do
            if [ -f "$blockmap" ]; then
              release_files+=("$blockmap")
            fi
          done

          # Create the release
          echo "Creating release v${{ steps.package-version.outputs.version }}-${{ github.run_number }} with ${#release_files[@]} assets"

          gh release create "v${{ steps.package-version.outputs.version }}-${{ github.run_number }}" \
            --title "Release v${{ steps.package-version.outputs.version }}-${{ github.run_number }}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            "${release_files[@]}"
